/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

plugins {
  id "com.github.node-gradle.node" version "3.0.1"
}

allprojects {
  repositories {
    mavenLocal()
    jcenter()
  }
}

project.ext.SUBPROJS_TO_IGNORE = [
  'packages'
]
configure(subprojects.findAll { !project.ext.SUBPROJS_TO_IGNORE.contains(it.name) }) {
  apply plugin: "com.github.node-gradle.node" // version "3.0.1"

  def slash = File.separator
  project.ext.PROJDIR = "${project.buildDir.toString()}${slash}${slash}${slash}".replace("${slash}build${slash}${slash}", '')

  task clean(type: Delete) {}

  task compileJS(type: NpmTask) {}
  compileJS.inputs.file('package.json')
  compileJS.inputs.dir('src')


  task build {}
  build.dependsOn ":packages:${project.name}:compileJS"

  task lint(type: NpmTask) {
    args = ['run', 'lint']
  }
  lint.inputs.dir('src')
  lint.outputs.dir('src')
  build.shouldRunAfter ":packages:${project.name}:lint"


  task test(type: NpmTask) {}
  test.inputs.files('package.json')
  test.inputs.dir('src')
  test.inputs.dir('test')
  // test.dependsOn ":packages:${project.name}:npmClean"
  test.dependsOn ":packages:${project.name}:lint"
  test.dependsOn build
  // build.dependsOn npmInstall

  npmInstall.enabled = false
}


def slash = File.separator
def markerName = ".${slash}packages${slash}react4xp${slash}npmLinked.marker"


npmInstall.inputs.files('package.json', 'package-lock.json', 'build.gradle')
npmInstall.outputs.file('package-lock.json')
npmInstall.outputs.file file(markerName)

// Replace npmInstall with npmDoInstall in order to ensure than npmLink is run afterwards!
task npmDoInstall(type: NpmTask) {
  args = ['install']

  inputs.files('package.json', 'package-lock.json', 'build.gradle')
  inputs.files('package.json', 'build.gradle')
  outputs.file file(markerName)
}

task clean(type: Delete) {
  delete 'build'
  followSymlinks = false

  doLast {
    def marker = new File(markerName)
    marker.delete()
  }
}

task npmUnlink(type: NpmTask) {
  args = ['run', 'npmUnlink']

  npmInstall.inputs.files('package.json', 'package-lock.json', 'build.gradle')
  outputs.file file(markerName)

  doLast {
    def marker = new File(markerName)
    marker.delete()
  }
}
task npmLink(type: NpmTask) {
  args = ['run', 'npmLink']

  npmInstall.inputs.files('package.json', 'package-lock.json', 'build.gradle')
  inputs.files('package.json', 'build.gradle')
  outputs.file file(markerName)

  doLast {
    def marker = new File(markerName)
    new File(marker.getParent()).mkdirs()
    marker.text = """
Marker file, indicating that the npmInstall gradle task has been run in the root project - faster than traversing the entire node_modules tree for changes.
"""
    println "\nNPM marker installed --> $markerName"
  }
}

npmInstall.enabled = false;
npmInstall.dependsOn npmDoInstall
npmInstall.dependsOn npmLink
npmLink.mustRunAfter npmDoInstall
npmDoInstall.dependsOn npmUnlink


task setup(type: NpmTask) {
  doFirst {
    def marker = new File(markerName)
    marker.delete()
  }

  args = ['run', 'setup']
}

///////////////////////////////////////////////////

apply from: 'versionAndPublish.gradle'


